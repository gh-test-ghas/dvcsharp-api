# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request,
# surfacing known-vulnerable versions of the packages declared or updated in the PR.
# Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable
# packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
name: 'review'
on:
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
# If using a dependency submission action in this workflow this permission will need to be set to:
#
# permissions:
#   contents: write
#
# https://docs.github.com/en/enterprise-cloud@latest/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api
permissions:
  contents: write
  # Write permissions for pull-requests are required for using the `comment-summary-in-pr` option, comment out if you aren't using this option
  pull-requests: write
jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: Component Detection dependency submission action
        uses: advanced-security/component-detection-dependency-submission-action@v0.0.6               
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        # Commonly enabled options, see https://github.com/actions/dependency-review-action#configuration-options for all available options.
        with:
          comment-summary-in-pr: always
          fail-on-severity: moderate
          deny-licenses: GPL-1.0-or-later, LGPL-2.0-or-later
          retry-on-snapshot-warnings: true
      
      # Export SBOM from GitHub API
      - name: 'Export SBOM'
        run: |
          echo "Fetching SBOM for ${{ github.repository }}..."
          
          # Make the API request to get the SBOM
          SBOM_RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/dependency-graph/sbom)
          
          # Check if the request was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch SBOM"
            exit 1
          fi
          
          # Pretty print the SBOM
          echo "SBOM Export:"
          echo "============"
          echo "$SBOM_RESPONSE" | jq '.'
          
          # Optionally save to a file
          echo "$SBOM_RESPONSE" | jq '.' > sbom.json
          echo "SBOM saved to sbom.json"
          
      # Optional: Upload SBOM as an artifact
      - name: 'Upload SBOM Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.json
          retention-days: 30
